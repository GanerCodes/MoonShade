#define ꬷ length
#define ꬼ normalize
#define Ʀ reflect
#define ꬵ refract
#define Ӎ mix
#define 􋐼 pow
#define • dot

uniform 𝟚 res;
uniform 𝟙 t;
uniform 𝟛 vp_loc;
uniform 𝟚 vp_ang;

#define MAX_ITERS 256
#define RI 1.5
#define BG 𝟜(.53,.81,1.,1.)
#define δ 0.001
#define ε 0.0002

𝟛 lgh = ꬼ(𝟛(2,5,2));

𝟛 θXY(𝟛 p,𝟙 r) ⇒↪ 𝟛(pˣ⋅􋐳(r)-pʸ⋅􋐲(r),pˣ⋅􋐲(r)+pʸ⋅􋐳(r),pᶻ);
𝟛 θXZ(𝟛 p,𝟙 r) ⇒↪ 𝟛(pˣ⋅􋐳(r)-pᶻ⋅􋐲(r),pʸ,pˣ⋅􋐲(r)+pᶻ⋅􋐳(r));
𝟛 θYZ(𝟛 p,𝟙 r) ⇒↪ 𝟛(pˣ,pʸ⋅􋐳(r)-pᶻ⋅􋐲(r),pʸ⋅􋐲(r)+pᶻ⋅􋐳(r));
𝟛 θXZYZ  (𝟛 p, 𝟚 θ) ⇒↪ θXZ(θYZ(p, θˣ), θʸ);
𝟛 θXZYZ_i(𝟛 p, 𝟚 θ) ⇒↪ θYZ(θXZ(p,¯θˣ),¯θʸ);

𝟙 xor(𝟙 x, 𝟙 y) ⇒↪ ⤉(⤈(x,y),¯⤉(x,y));
𝟙 box(𝟛 p, 𝟛 b) ⇒
    𝟛 d = ⫰(p)-b;
    ↪ ꬷ(⤉(d,0)) + ⤈(max3(d),0);
𝟜 elong_(𝟛 p, 𝟛 h) ⇒
    𝟛 q = ⫰(p)-h;
    ↪ 𝟜(sign(p)⋅⤉(q,0),⤈(⤉(qˣ,⤉(qʸ,qᶻ)),0));
𝟛 elong(𝟛 p, 𝟛 h) ⇒↪ p-󷹄(p,-h,h);
𝟙 sphere(𝟛 p) ⇒↪ ꬷ(p)-1;
𝟙 cube  (𝟛 p) ⇒↪ box(p,𝟛(1));
#define revolve(ƒ,p,d) ((ƒ)(𝟚(ꬷ((p)ˣᶻ)-d, (p)ʸ)))
#define extrude(ƒ,p,h) (_extrude((p),(ƒ)((p)ˣʸ),h))
𝟙 _extrude(𝟛 p, 𝟙 d, 𝟙 h) ⇒
    𝟚 w = 𝟚(d, ⫰(pᶻ)-h);
    ↪ ⤈(max2(w),0) + ꬷ(⤉(w,0));

𝟙 circle(𝟚 p) ⇒↪ ꬷ(p)-1;
𝟙 box2(𝟚 p, 𝟚 b) ⇒
    𝟚 d = ⫰(p)-b;
    ↪ ꬷ(⤉(d,0)) + ⤈(max2(dˣʸ),0);

𝟙 weird_shape(𝟚 p) ⇒↪ xor(circle(p)+⅓, box2(p+𝟚(1,⅔),𝟚(1,⅔)));
𝟙 weird_shape_2(𝟛 p) ⇒↪ extrude(weird_shape,p,⅓);
𝟙 𝼥(𝟛 p) ⇒
    𝟙 circs = ⤉(sphere(⸓(p+1.5,3)-1.5)+⅕,box(p-𝟛(0,3,0),𝟛(4,4,4)));
    𝟙 board = box(p+𝟛(0,2,0),𝟛(3⋅π,󷷉,3⋅π));
    ↪ ⤈(circs,board);
    
𝟛 ꬶ(𝟛 p) ⇒↪ ꬼ(𝟛(𝼥(p+𝟛(ε,0,0)),
                𝼥(p+𝟛(0,ε,0)),
                𝼥(p+𝟛(0,0,ε)))-𝼥(p));

𝟜 𝼝(𝟛 p) ⇒
    ¿(pʸ<󷰾) ↪ 𝟜(􋐲(2⋅pˣ)⋅􋐲(2⋅pᶻ)≤0 ⭜𝟛(.9,0,0)⭝ 𝟛(0,0,.9),.85);
    𝟙 circs = ⤉(sphere(⸓(p+1.5,3)-1.5)+⅕,box(p-𝟛(0,3,0),𝟛(4,4,4)));
    ¿(circs≤δ) ↪ 𝟜(.7,1.,.7,.5);
    ↪ BG;

struct ℜℜ { 𝟜 𝚌; 𝟛 p; 𝟙 d; 𝑖 i; 𝟛 ω; };
struct 𝔇ℭ { ℜℜ ⯇,⯈; 𝟙 r; ᖲ ⟵,⟶; };

𝟙 exposure(𝟛 p, 𝟛 ω, 𝟙 r) ⇒
    𝟙 d = 1e20;
    𝟙 s = d;
    𝑖 i=0;
    ∀(;i<MAX_ITERS;i++) ⇒
        d = 𝼥(p);
        s = ⤈(s,d);
        ¿(d≥1000.0 || d≤¯1/r) ⇥;
        p += ⤉(⫰(d),󷷉)⋅ω;
    ↪ 󷹄(.9+s⋅r,0,1);

ℜℜ render(𝟛 p, 𝟛 ω) ⇒
    𝟜 𝚌 = BG;
    𝟙 d = 𝼥(p);
    𝑖 i=0;
    ¿(d<½⋅δ) ⇒
        ➰(i++<MAX_ITERS && (d=𝼥(p=p+⤉(⫰(d),25⋅δ)⋅ω))≤δ);
        ω = ꬵ(ω,-ꬶ(p-δ⋅ω),1./RI);
    i=0;
    ➰(✓) ⇒
        ¿(d≤δ) 𝚌 = Ӎ(𝼝(p),BG,􋐼(1.⋅i/MAX_ITERS,2));
        ¿(d≤δ || d≥1000.0 || i++==MAX_ITERS) ↪ ℜℜ(𝚌,p,d,i,ω);
        d = 𝼥(p = p+d⋅ω);

 Schlick's approximation
𝟜 wop(𝟙 dp, ℜℜ α, ℜℜ β) ⇒
    ↪ Ӎ(α􀲟,β􀲟,Ӎ(􋐼(1-⤉(dp,0),5),1,􋐼((1-RI)÷(1+RI),2)));

ℜℜ shadowed(𝟛 p, 𝟛 ω) ⇒
    ℜℜ ⯅ = render(p,ω);
    ↪ (⯅􀲟 ʳᵍᵇ ⋅= ½⋅(1+exposure(⯅ᵖ,ꬼ(lgh),3)), ⯅);

𝔇ℭ dualcast(ℜℜ ⯅) ⇒
    𝟛 Δ = 6⋅⯅󰁤⋅δ, g = -ꬶ(⯅ᵖ);

    𝟛 α = Ʀ(⯅󰁤,g);
    𝟛 β = ꬵ(⯅󰁤,g,RI);
    
    ᖲ good;
    ℜℜ ⯇ =                  shadowed(⯅ᵖ-Δ,α)   ;
    ℜℜ ⯈ = (good=•(α,β)>0) ⭜shadowed(⯅ᵖ+Δ,β)⭝ ⯇;
    ↪ 𝔇ℭ(⯇,⯈, •(⯅󰁤,g), ⯇ᵈ<1000 && ⯇ⁱ<MAX_ITERS,
               good && ⯈ᵈ<1000 && ⯈ⁱ<MAX_ITERS);
    
 ℜℜ αα=cast_frac(α), αβ=cast_refl(α);
 α􀲟=wop(α,•(αα󰁤,αβ󰁤)>0⭜αα⭝αβ,αβ);

𝟜 𝔐(ℜℜ Ω, 𝔇ℭ ⯅) ⇒ ↪ ⯅􋄤||⯅􋄥 ⭜Ӎ(Ӎ(⯅􋓱 􀲟,⯅􋅌 􀲟,⯅ʳ),Ω􀲟,Ω􀲟 ᵃ)⭝ Ω􀲟;

ᗜ main() ⇒
    𝟚 p = (gl_FragCoordˣʸ - ½⋅res)÷min2(res);
    
    𝟙 FOV = 90;
    𝟙 cam_dist = 100;
    𝟙 hFOV = FOV⋅􋐴(π⋅FOV÷360);
    𝟛 p_e = 𝟛(hFOV⋅p, ¯cam_dist);
    𝟛 C_s = vp_loc;
    𝟛 C_e = C_s + θXZYZ(p_e, vp_angʸˣ⋅𝟚(󷰾,1));
    
    𝟛 ω = ꬼ(C_e-C_s);
    ℜℜ Ω = shadowed(C_s,ω);
    ¿(Ωᵈ<1000 && Ω􀲟 ᵃ<.9975) ⇒
        𝔇ℭ ⯅ = dualcast(Ω);
        ¿(⯅􋄤)⇒ ℜℜ Ω=⯅􋓱;
          ⇒𝔇ℭ ⯅=dualcast(Ω);
           ¿(⯅􋄤)⇒ℜℜ Ω=⯅􋓱;
                 ⇒𝔇ℭ ⯅=dualcast(Ω);
                  Ω􀲟=𝔐(Ω,⯅);
           ¿(⯅􋄥)⇒ℜℜ Ω=⯅􋅌;
                 ⇒𝔇ℭ ⯅=dualcast(Ω);
                  Ω􀲟=𝔐(Ω,⯅);
           Ω􀲟=𝔐(Ω,⯅);
        ¿(⯅􋄥)⇒ ℜℜ Ω=⯅􋅌;
          ⇒𝔇ℭ ⯅=dualcast(Ω);
           ¿(⯅􋄤)⇒ℜℜ Ω=⯅􋓱;
                 ⇒𝔇ℭ ⯅=dualcast(Ω);
                  Ω􀲟=𝔐(Ω,⯅);
           ¿(⯅􋄥)⇒ℜℜ Ω=⯅􋅌;
                 ⇒𝔇ℭ ⯅=dualcast(Ω);
                  Ω􀲟=𝔐(Ω,⯅);
           Ω􀲟=𝔐(Ω,⯅);
        Ω􀲟=𝔐(Ω,⯅);
    FragColor = Ω􀲟;

 ¿(Ωᵈ<1000 && Ω􀲟 ᵃ<.9975) ⇒
     𝔇ℭ ⯅ = dualcast(Ω);
     ¿(⯅􋄤||⯅􋄥)⇒
         ¿(⯅􋄤)⇒ ℜℜ Ω=⯅􋓱; ⇒
             𝔇ℭ ⯅=dualcast(Ω);
             ¿(⯅􋄤||⯅􋄥)⇒
                 Ω􀲟=𝔐(Ω,⯅);
         ¿(⯅􋄥)⇒ ℜℜ Ω=⯅􋅌; ⇒
             𝔇ℭ ⯅=dualcast(Ω);
             ¿(⯅􋄤||⯅􋄥)⇒
                 Ω􀲟=𝔐(Ω,⯅);
         Ω􀲟=𝔐(Ω,⯅);
 FragColor = Ω􀲟;